package view;

import dao.AppointmentDAO;
import model.Appointment;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.Date;
import java.sql.Time;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;

public class AppointmentPanel extends JPanel {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private final controller.AppointmentController controller = new controller.AppointmentController();
    private final AppointmentDAO dao = new AppointmentDAO();
    private int selectedAppointmentID = -1;

    // Fields
    private final JTextField txtStudent = new JTextField(20);
    private final JTextField txtCounselorID = new JTextField(20);
    private final JTextField txtDate = new JTextField(20);
    private final JTextField txtTime = new JTextField(20);
    private final JComboBox<String> cmbStatus = new JComboBox<>(new String[]{"Pending", "Confirmed", "Cancelled"});

    // Buttons
    private final JButton btnAdd = new JButton("Add");
    private final JButton btnUpdate = new JButton("Update");
    private final JButton btnDelete = new JButton("Delete");
    private final JButton btnClear = new JButton("Clear");
    private final JButton btnViewUpcoming = new JButton("View Upcoming");
    private final JButton btnShowAll = new JButton("Show All");



    // Table
    private final DefaultTableModel tableModel = new DefaultTableModel(
        new String[]{"ID", "Student", "Counselor", "Date", "Time", "Status"}, 0);
    private final JTable tblAppointments = new JTable(tableModel);

    public AppointmentPanel() {
        setLayout(new BorderLayout(10, 10));
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // === Form Panel ===
        JPanel formPanel = new JPanel();
        formPanel.setLayout(new BoxLayout(formPanel, BoxLayout.Y_AXIS));
        formPanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createEtchedBorder(), "Appointment Details", TitledBorder.LEFT, TitledBorder.TOP));

        formPanel.add(createLabeledField("Student:", txtStudent));
        formPanel.add(createLabeledField("Counselor ID:", txtCounselorID));
        formPanel.add(createLabeledField("Date (YYYY-MM-DD):", txtDate));
        formPanel.add(createLabeledField("Time (HH:MM):", txtTime));
        formPanel.add(createLabeledField("Status:", cmbStatus));

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        buttonPanel.add(btnAdd);
        buttonPanel.add(btnUpdate);
        buttonPanel.add(btnDelete);
        buttonPanel.add(btnClear);
        buttonPanel.add(btnViewUpcoming);
        buttonPanel.add(btnShowAll);
        formPanel.add(buttonPanel);
        

        add(formPanel, BorderLayout.NORTH);

        // === Table Panel ===
        JScrollPane scrollPane = new JScrollPane(tblAppointments);
        scrollPane.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createEtchedBorder(), "Appointment List", TitledBorder.LEFT, TitledBorder.TOP));
        add(scrollPane, BorderLayout.CENTER);

        // === Listeners ===

        btnAdd.addActionListener(e -> {
            if (!validateInput()) return;

            Appointment appt = new Appointment();
            appt.setStudentName(txtStudent.getText());

            try {
                appt.setCounselorId(Integer.parseInt(txtCounselorID.getText()));
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid Counselor ID. Must be a number.");
                return;
            }

            try {
                appt.setDate(Date.valueOf(LocalDate.parse(txtDate.getText(), DateTimeFormatter.ISO_DATE)));
                appt.setTime(Time.valueOf(txtTime.getText() + ":00")); // Add seconds
            } catch (DateTimeParseException | IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(this, "Invalid date/time format.\nDate: yyyy-MM-dd\nTime: HH:mm (24h)");
                return;
            }

            appt.setStatus((String) cmbStatus.getSelectedItem());

            try {
                String result = dao.createAppointment(appt);
                JOptionPane.showMessageDialog(this, result);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error adding appointment:\n" + ex.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
            }
            
            loadAppointments();
            clearFields();
        });

        btnUpdate.addActionListener(e -> {
            if (selectedAppointmentID == -1 || !validateInput()) return;

            Appointment appt = new Appointment();
            appt.setId(selectedAppointmentID);
            appt.setStudentName(txtStudent.getText());

            try {
                appt.setCounselorId(Integer.parseInt(txtCounselorID.getText()));
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid Counselor ID. Must be a number.");
                return;
            }

            try {
                appt.setDate(Date.valueOf(LocalDate.parse(txtDate.getText(), DateTimeFormatter.ISO_DATE)));
                appt.setTime(Time.valueOf(txtTime.getText() + ":00"));
            } catch (DateTimeParseException | IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(this, "Invalid date/time format.\nDate: yyyy-MM-dd\nTime: HH:mm (24h)");
                return;
            }

            appt.setStatus((String) cmbStatus.getSelectedItem());

            try {
                String result = dao.updateAppointment(appt);
                JOptionPane.showMessageDialog(this, result);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error updating appointment:\n" + ex.getMessage(),
                    "Database Error", JOptionPane.ERROR_MESSAGE);
            }
            
            loadAppointments();
            clearFields();
        });

        btnDelete.addActionListener(e -> {
            if (selectedAppointmentID == -1) return;

            int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete appointment ID: " + selectedAppointmentID + "?",
                "Confirm Delete", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    String result = dao.deleteAppointment(selectedAppointmentID);
                    JOptionPane.showMessageDialog(this, result);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error deleting appointment:\n" + ex.getMessage(),
                        "Database Error", JOptionPane.ERROR_MESSAGE);
                }
                loadAppointments();
                clearFields();
            }
        });

        btnClear.addActionListener(e -> clearFields());

        tblAppointments.getSelectionModel().addListSelectionListener(e -> {
            int row = tblAppointments.getSelectedRow();
            if (row != -1) {
                selectedAppointmentID = Integer.parseInt(tableModel.getValueAt(row, 0).toString());
                txtStudent.setText(tableModel.getValueAt(row, 1).toString());
                txtCounselorID.setText(tableModel.getValueAt(row, 2).toString());
                txtDate.setText(tableModel.getValueAt(row, 3).toString());

                String time = tableModel.getValueAt(row, 4).toString();
                txtTime.setText(time.length() >= 5 ? time.substring(0, 5) : time);

                cmbStatus.setSelectedItem(tableModel.getValueAt(row, 5).toString());
            }
        });

        btnViewUpcoming.addActionListener(e -> loadUpcomingAppointments());
        
        btnShowAll.addActionListener(e -> loadAppointments());


        loadAppointments();
    }

    private JPanel createLabeledField(String label, JComponent input) {
        JPanel panel = new JPanel(new BorderLayout(5, 5));
        JLabel jLabel = new JLabel(label);
        jLabel.setPreferredSize(new Dimension(140, 25));
        panel.add(jLabel, BorderLayout.WEST);
        panel.add(input, BorderLayout.CENTER);
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        return panel;
    }

    private void loadAppointments() {
        tableModel.setRowCount(0);
        try {
            for (Appointment a : dao.getAllAppointments()) {
                tableModel.addRow(new Object[]{
                    a.getId(), a.getStudentName(), a.getCounselorId(), a.getDate(), a.getTime(), a.getStatus()
                });
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading appointments:\n" + ex.getMessage(),
                "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        txtStudent.setText("");
        txtCounselorID.setText("");
        txtDate.setText("");
        txtTime.setText("");
        cmbStatus.setSelectedIndex(0);
        selectedAppointmentID = -1;
        tblAppointments.clearSelection();
    }

    private boolean validateInput() {
        if (txtStudent.getText().trim().isEmpty() ||
            txtCounselorID.getText().trim().isEmpty() ||
            txtDate.getText().trim().isEmpty() ||
            txtTime.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please ensure all fields are filled in.");
            return false;
        }
        return true;
    }
    
    private void loadUpcomingAppointments() {
        tableModel.setRowCount(0);

        List<Appointment> allAppointments = controller.getAllAppointments();
        LocalDate today = LocalDate.now();

        for (Appointment appt : allAppointments) {
            LocalDate apptDate = appt.getDate().toLocalDate();
            if (!apptDate.isBefore(today) && !"Cancelled".equalsIgnoreCase(appt.getStatus())) {
                tableModel.addRow(new Object[]{
                    appt.getId(),
                    appt.getStudentName(),
                    appt.getCounselorId(),
                    appt.getDate(),
                    appt.getTime(),
                    appt.getStatus()
                });
            }
        }
    }
}
